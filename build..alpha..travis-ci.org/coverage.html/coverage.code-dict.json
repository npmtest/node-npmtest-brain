{"/home/travis/build/npmtest/node-npmtest-brain/test.js":"/* istanbul instrument in package npmtest_brain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-brain/lib.npmtest_brain.js":"/* istanbul instrument in package npmtest_brain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_brain = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_brain = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-brain/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-brain && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_brain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_brain\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_brain.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_brain.rollup.js'] =\n            local.assetsDict['/assets.npmtest_brain.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_brain.__dirname +\n                    '/lib.npmtest_brain.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-brain/brain/lib/brain.js":"exports.NeuralNetwork = require(\"./neuralnetwork\").NeuralNetwork;\nexports.crossValidate = require(\"./cross-validate\");\n","/home/travis/build/npmtest/node-npmtest-brain/brain/lib/neuralnetwork.js":"var _ = require(\"underscore\"),\n    lookup = require(\"./lookup\"),\n    Writable = require('stream').Writable,\n    inherits = require('inherits');\n\nvar NeuralNetwork = function(options) {\n  options = options || {};\n  this.learningRate = options.learningRate || 0.3;\n  this.momentum = options.momentum || 0.1;\n  this.hiddenSizes = options.hiddenLayers;\n\n  this.binaryThresh = options.binaryThresh || 0.5;\n}\n\nNeuralNetwork.prototype = {\n  initialize: function(sizes) {\n    this.sizes = sizes;\n    this.outputLayer = this.sizes.length - 1;\n\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (var layer = 0; layer <= this.outputLayer; layer++) {\n      var size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (var node = 0; node < size; node++) {\n          var prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n  },\n\n  run: function(input) {\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n\n    var output = this.runInput(input);\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  },\n\n  runInput: function(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    for (var layer = 1; layer <= this.outputLayer; layer++) {\n      for (var node = 0; node < this.sizes[layer]; node++) {\n        var weights = this.weights[layer][node];\n\n        var sum = this.biases[layer][node];\n        for (var k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      var output = input = this.outputs[layer];\n    }\n    return output;\n  },\n\n  train: function(data, options) {\n    data = this.formatData(data);\n\n    options = options || {};\n    var iterations = options.iterations || 20000;\n    var errorThresh = options.errorThresh || 0.005;\n    var log = options.log || false;\n    var logPeriod = options.logPeriod || 10;\n    var learningRate = options.learningRate || this.learningRate || 0.3;\n    var callback = options.callback;\n    var callbackPeriod = options.callbackPeriod || 10;\n\n    var inputSize = data[0].input.length;\n    var outputSize = data[0].output.length;\n\n    var hiddenSizes = this.hiddenSizes;\n    if (!hiddenSizes) {\n      hiddenSizes = [Math.max(3, Math.floor(inputSize / 2))];\n    }\n    var sizes = _([inputSize, hiddenSizes, outputSize]).flatten();\n    this.initialize(sizes);\n\n    var error = 1;\n    for (var i = 0; i < iterations && error > errorThresh; i++) {\n      var sum = 0;\n      for (var j = 0; j < data.length; j++) {\n        var err = this.trainPattern(data[j].input, data[j].output, learningRate);\n        sum += err;\n      }\n      error = sum / data.length;\n\n      if (log && (i % logPeriod == 0)) {\n        console.log(\"iterations:\", i, \"training error:\", error);\n      }\n      if (callback && (i % callbackPeriod == 0)) {\n        callback({ error: error, iterations: i });\n      }\n    }\n\n    return {\n      error: error,\n      iterations: i\n    };\n  },\n\n  trainPattern : function(input, target, learningRate) {\n    learningRate = learningRate || this.learningRate;\n\n    // forward propogate\n    this.runInput(input);\n\n    // back propogate\n    this.calculateDeltas(target);\n    this.adjustWeights(learningRate);\n\n    var error = mse(this.errors[this.outputLayer]);\n    return error;\n  },\n\n  calculateDeltas: function(target) {\n    for (var layer = this.outputLayer; layer >= 0; layer--) {\n      for (var node = 0; node < this.sizes[layer]; node++) {\n        var output = this.outputs[layer][node];\n\n        var error = 0;\n        if (layer == this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          var deltas = this.deltas[layer + 1];\n          for (var k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  },\n\n  adjustWeights: function(learningRate) {\n    for (var layer = 1; layer <= this.outputLayer; layer++) {\n      var incoming = this.outputs[layer - 1];\n\n      for (var node = 0; node < this.sizes[layer]; node++) {\n        var delta = this.deltas[layer][node];\n\n        for (var k = 0; k < incoming.length; k++) {\n          var change = this.changes[layer][node][k];\n\n          change = (learningRate * delta * incoming[k])\n                   + (this.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += learningRate * delta;\n      }\n    }\n  },\n\n  formatData: function(data) {\n    if (!_.isArray(data)) { // turn stream datum into array\n      var tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    var datum = data[0].input;\n    if (!_(datum).isArray() && !(datum instanceof Float64Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(_(data).pluck(\"input\"));\n      }\n      data = data.map(function(datum) {\n        var array = lookup.toArray(this.inputLookup, datum.input)\n        return _(_(datum).clone()).extend({ input: array });\n      }, this);\n    }\n\n    if (!_(data[0].output).isArray()) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(_(data).pluck(\"output\"));\n      }\n      data = data.map(function(datum) {\n        var array = lookup.toArray(this.outputLookup, datum.output);\n        return _(_(datum).clone()).extend({ output: array });\n      }, this);\n    }\n    return data;\n  },\n\n  test : function(data) {\n    data = this.formatData(data);\n\n    // for binary classification problems with one output node\n    var isBinary = data[0].output.length == 1;\n    var falsePos = 0,\n        falseNeg = 0,\n        truePos = 0,\n        trueNeg = 0;\n\n    // for classification problems\n    var misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    var sum = 0;\n    for (var i = 0; i < data.length; i++) {\n      var output = this.runInput(data[i].input);\n      var target = data[i].output;\n\n      var actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(_(output).max());\n        expected = target.indexOf(_(target).max());\n      }\n\n      if (actual != expected) {\n        var misclass = data[i];\n        _(misclass).extend({\n          actual: actual,\n          expected: expected\n        })\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual == 0 && expected == 0) {\n          trueNeg++;\n        }\n        else if (actual == 1 && expected == 1) {\n          truePos++;\n        }\n        else if (actual == 0 && expected == 1) {\n          falseNeg++;\n        }\n        else if (actual == 1 && expected == 0) {\n          falsePos++;\n        }\n      }\n\n      var errors = output.map(function(value, i) {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    var error = sum / data.length;\n\n    var stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      _(stats).extend({\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos / (truePos + falsePos),\n        recall: truePos / (truePos + falseNeg),\n        accuracy: (trueNeg + truePos) / data.length\n      })\n    }\n    return stats;\n  },\n\n  toJSON: function() {\n    /* make json look like:\n      {\n        layers: [\n          { x: {},\n            y: {}},\n          {'0': {bias: -0.98771313, weights: {x: 0.8374838, y: 1.245858},\n           '1': {bias: 3.48192004, weights: {x: 1.7825821, y: -2.67899}}},\n          { f: {bias: 0.27205739, weights: {'0': 1.3161821, '1': 2.00436}}}\n        ]\n      }\n    */\n    var layers = [];\n    for (var layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      var nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer == 0 && this.inputLookup) {\n        nodes = _(this.inputLookup).keys();\n      }\n      else if (layer == this.outputLayer && this.outputLookup) {\n        nodes = _(this.outputLookup).keys();\n      }\n      else {\n        nodes = _.range(0, this.sizes[layer]);\n      }\n\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (var k in layers[layer - 1]) {\n            var index = k;\n            if (layer == 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return { layers: layers, outputLookup:!!this.outputLookup, inputLookup:!!this.inputLookup };\n  },\n\n  fromJSON: function(json) {\n    var size = json.layers.length;\n    this.outputLayer = size - 1;\n\n    this.sizes = new Array(size);\n    this.weights = new Array(size);\n    this.biases = new Array(size);\n    this.outputs = new Array(size);\n\n    for (var i = 0; i <= this.outputLayer; i++) {\n      var layer = json.layers[i];\n      if (i == 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.lookupFromHash(layer);\n      }\n      else if (i == this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.lookupFromHash(layer);\n      }\n\n      var nodes = _(layer).keys();\n      this.sizes[i] = nodes.length;\n      this.weights[i] = [];\n      this.biases[i] = [];\n      this.outputs[i] = [];\n\n      for (var j in nodes) {\n        var node = nodes[j];\n        this.biases[i][j] = layer[node].bias;\n        this.weights[i][j] = _(layer[node].weights).toArray();\n      }\n    }\n    return this;\n  },\n\n   toFunction: function() {\n    var json = this.toJSON();\n    // return standalone function that mimics run()\n    return new Function(\"input\",\n'  var net = ' + JSON.stringify(json) + ';\\n\\n\\\n  for (var i = 1; i < net.layers.length; i++) {\\n\\\n    var layer = net.layers[i];\\n\\\n    var output = {};\\n\\\n    \\n\\\n    for (var id in layer) {\\n\\\n      var node = layer[id];\\n\\\n      var sum = node.bias;\\n\\\n      \\n\\\n      for (var iid in node.weights) {\\n\\\n        sum += node.weights[iid] * input[iid];\\n\\\n      }\\n\\\n      output[id] = (1 / (1 + Math.exp(-sum)));\\n\\\n    }\\n\\\n    input = output;\\n\\\n  }\\n\\\n  return output;');\n  },\n\n  // This will create a TrainStream (WriteStream)\n  //  for us to send the training data to.\n  //  param: opts - the training options\n  createTrainStream: function(opts) {\n    opts = opts || {};\n    opts.neuralNetwork = this;\n    this.trainStream = new TrainStream(opts);\n    return this.trainStream;\n  }\n}\n\nfunction randomWeight() {\n  return Math.random() * 0.4 - 0.2;\n}\n\nfunction zeros(size) {\n  var array = new Array(size);\n  for (var i = 0; i < size; i++) {\n    array[i] = 0;\n  }\n  return array;\n}\n\nfunction randos(size) {\n  var array = new Array(size);\n  for (var i = 0; i < size; i++) {\n    array[i] = randomWeight();\n  }\n  return array;\n}\n\nfunction mse(errors) {\n  // mean squared error\n  var sum = 0;\n  for (var i = 0; i < errors.length; i++) {\n    sum += Math.pow(errors[i], 2);\n  }\n  return sum / errors.length;\n}\n\nexports.NeuralNetwork = NeuralNetwork;\n\nfunction TrainStream(opts) {\n  Writable.call(this, {\n    objectMode: true\n  });\n\n  opts = opts || {};\n\n  // require the neuralNetwork\n  if (!opts.neuralNetwork) {\n    throw new Error('no neural network specified');\n  }\n\n  this.neuralNetwork = opts.neuralNetwork;\n  this.dataFormatDetermined = false;\n\n  this.inputKeys = [];\n  this.outputKeys = []; // keeps track of keys seen\n  this.i = 0; // keep track of the for loop i variable that we got rid of\n  this.iterations = opts.iterations || 20000;\n  this.errorThresh = opts.errorThresh || 0.005;\n  this.log = opts.log || false;\n  this.logPeriod = opts.logPeriod || 10;\n  this.callback = opts.callback;\n  this.callbackPeriod = opts.callbackPeriod || 10;\n  this.floodCallback = opts.floodCallback;\n  this.doneTrainingCallback = opts.doneTrainingCallback;\n\n  this.size = 0;\n  this.count = 0;\n\n  this.sum = 0;\n\n  this.on('finish', this.finishStreamIteration);\n\n  return this;\n}\n\ninherits(TrainStream, Writable);\n\n/*\n  _write expects data to be in the form of a datum.\n  ie. {input: {a: 1 b: 0}, output: {z: 0}}\n */\nTrainStream.prototype._write = function(chunk, enc, next) {\n  if (!chunk) { // check for the end of one interation of the stream\n    this.emit('finish');\n    return next();\n  }\n\n  if (!this.dataFormatDetermined) {\n    this.size++;\n    this.inputKeys = _.union(this.inputKeys, _.keys(chunk.input));\n    this.outputKeys = _.union(this.outputKeys, _.keys(chunk.output));\n    this.firstDatum = this.firstDatum || chunk;\n    return next();\n  }\n\n  this.count++;\n\n  var data = this.neuralNetwork.formatData(chunk);\n  this.trainDatum(data[0]);\n\n  // tell the Readable Stream that we are ready for more data\n  next();\n}\n\nTrainStream.prototype.trainDatum = function(datum) {\n  var err = this.neuralNetwork.trainPattern(datum.input, datum.output);\n  this.sum += err;\n}\n\nTrainStream.prototype.finishStreamIteration = function() {\n  if (this.dataFormatDetermined && this.size !== this.count) {\n    console.log(\"This iteration's data length was different from the first.\");\n  }\n\n  if (!this.dataFormatDetermined) {\n    // create the lookup\n    this.neuralNetwork.inputLookup = lookup.lookupFromArray(this.inputKeys);\n    this.neuralNetwork.outputLookup = lookup.lookupFromArray(this.outputKeys);\n\n    var data = this.neuralNetwork.formatData(this.firstDatum);\n    var inputSize = data[0].input.length;\n    var outputSize = data[0].output.length;\n\n    var hiddenSizes = this.hiddenSizes;\n    if (!hiddenSizes) {\n      hiddenSizes = [Math.max(3, Math.floor(inputSize / 2))];\n    }\n    var sizes = _([inputSize, hiddenSizes, outputSize]).flatten();\n    this.dataFormatDetermined = true;\n    this.neuralNetwork.initialize(sizes);\n\n    if (typeof this.floodCallback === 'function') {\n      this.floodCallback();\n    }\n    return;\n  }\n\n  var error = this.sum / this.size;\n\n  if (this.log && (this.i % this.logPeriod == 0)) {\n    console.log(\"iterations:\", this.i, \"training error:\", error);\n  }\n  if (this.callback && (this.i % this.callbackPeriod == 0)) {\n    this.callback({\n      error: error,\n      iterations: this.i\n    });\n  }\n\n  this.sum = 0;\n  this.count = 0;\n  // update the iterations\n  this.i++;\n\n  // do a check here to see if we need the stream again\n  if (this.i < this.iterations && error > this.errorThresh) {\n    if (typeof this.floodCallback === 'function') {\n      return this.floodCallback();\n    }\n  } else {\n    // done training\n    if (typeof this.doneTrainingCallback === 'function') {\n      return this.doneTrainingCallback({\n        error: error,\n        iterations: this.i\n      });\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-brain/brain/lib/lookup.js":"var _ = require(\"underscore\");\n\n/* Functions for turning sparse hashes into arrays and vice versa */\n\nfunction buildLookup(hashes) {\n  // [{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}\n  var hash = _(hashes).reduce(function(memo, hash) {\n    return _(memo).extend(hash);\n  }, {});\n  return lookupFromHash(hash);\n}\n\nfunction lookupFromHash(hash) {\n  // {a: 6, b: 7} -> {a: 0, b: 1}\n  var lookup = {};\n  var index = 0;\n  for (var i in hash) {\n    lookup[i] = index++;\n  }\n  return lookup;\n}\n\nfunction toArray(lookup, hash) {\n  // {a: 0, b: 1}, {a: 6} -> [6, 0]\n  var array = [];\n  for (var i in lookup) {\n    array[lookup[i]] = hash[i] || 0;\n  }\n  return array;\n}\n\nfunction toHash(lookup, array) {\n  // {a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}\n  var hash = {};\n  for (var i in lookup) {\n    hash[i] = array[lookup[i]];\n  }\n  return hash;\n}\n\nfunction lookupFromArray(array) {\n  var lookup = {};\n  // super fast loop\n  var z = 0;\n  var i = array.length;\n  while (i-- > 0) {\n    lookup[array[i]] = z++;\n  };\n  return lookup;\n}\n\nmodule.exports = {\n  buildLookup: buildLookup,\n  lookupFromHash: lookupFromHash,\n  toArray: toArray,\n  toHash: toHash,\n  lookupFromArray: lookupFromArray\n};","/home/travis/build/npmtest/node-npmtest-brain/brain/lib/cross-validate.js":"var _ = require(\"underscore\")._;\n\nfunction testPartition(classifierConst, opts, trainOpts, trainSet, testSet) {\n  var classifier = new classifierConst(opts);\n\n  var beginTrain = Date.now();\n\n  var trainingStats = classifier.train(trainSet, trainOpts);\n\n  var beginTest = Date.now();\n\n  var testStats = classifier.test(testSet);\n\n  var endTest = Date.now();\n\n  var stats = _(testStats).extend({\n    trainTime : beginTest - beginTrain,\n    testTime : endTest - beginTest,\n    iterations: trainingStats.iterations,\n    trainError: trainingStats.error,\n    learningRate: trainOpts.learningRate,\n    hidden: classifier.hiddenSizes,\n    network: classifier.toJSON()\n  });\n\n  return stats;\n}\n\nmodule.exports = function crossValidate(classifierConst, data, opts, trainOpts, k) {\n  k = k || 4;\n  var size = data.length / k;\n\n  data = _(data).sortBy(function() {\n    return Math.random();\n  });\n\n  var avgs = {\n    error : 0,\n    trainTime : 0,\n    testTime : 0,\n    iterations: 0,\n    trainError: 0\n  };\n\n  var stats = {\n    truePos: 0,\n    trueNeg: 0,\n    falsePos: 0,\n    falseNeg: 0,\n    total: 0\n  };\n\n  var misclasses = [];\n\n  var results = _.range(k).map(function(i) {\n    var dclone = _(data).clone();\n    var testSet = dclone.splice(i * size, size);\n    var trainSet = dclone;\n\n    var result = testPartition(classifierConst, opts, trainOpts, trainSet, testSet);\n\n    _(avgs).each(function(sum, stat) {\n      avgs[stat] = sum + result[stat];\n    });\n\n    _(stats).each(function(sum, stat) {\n      stats[stat] = sum + result[stat];\n    })\n\n    misclasses.push(result.misclasses);\n\n    return result;\n  });\n\n  _(avgs).each(function(sum, i) {\n    avgs[i] = sum / k;\n  });\n\n  stats.precision = stats.truePos / (stats.truePos + stats.falsePos);\n  stats.recall = stats.truePos / (stats.truePos + stats.falseNeg);\n  stats.accuracy = (stats.trueNeg + stats.truePos) / stats.total;\n\n  stats.testSize = size;\n  stats.trainSize = data.length - size;\n\n  return {\n    avgs: avgs,\n    stats: stats,\n    sets: results,\n    misclasses: _(misclasses).flatten()\n  };\n}\n"}